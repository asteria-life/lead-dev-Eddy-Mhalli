/* tslint:disable */
/* eslint-disable */
/**
 * Swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppGetHealthResponseDTO,
  MessengerCreateConversationResponseDTO,
  MessengerGetMessagesResponseDTO,
  MessengerGetMessengersResponseDTO,
  MessengerSendMessageToAssistantBodyDTO,
  UserCreateUserBodyDTO,
  UserCreateUserResponseDTO,
} from '../models/index';
import {
    AppGetHealthResponseDTOFromJSON,
    AppGetHealthResponseDTOToJSON,
    MessengerCreateConversationResponseDTOFromJSON,
    MessengerCreateConversationResponseDTOToJSON,
    MessengerGetMessagesResponseDTOFromJSON,
    MessengerGetMessagesResponseDTOToJSON,
    MessengerGetMessengersResponseDTOFromJSON,
    MessengerGetMessengersResponseDTOToJSON,
    MessengerSendMessageToAssistantBodyDTOFromJSON,
    MessengerSendMessageToAssistantBodyDTOToJSON,
    UserCreateUserBodyDTOFromJSON,
    UserCreateUserBodyDTOToJSON,
    UserCreateUserResponseDTOFromJSON,
    UserCreateUserResponseDTOToJSON,
} from '../models/index';

export interface MessengerGetMessagesControllerGetMessagesRequest {
    messengerId: string;
}

export interface MessengerSendMessageToAssistantControllerSendMessageRequest {
    messengerId: string;
    messengerSendMessageToAssistantBodyDTO: MessengerSendMessageToAssistantBodyDTO;
}

export interface UserCreateUserControllerCreateRequest {
    userCreateUserBodyDTO: UserCreateUserBodyDTO;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Return the application\'s health
     */
    async appGetHealthControllerGetHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppGetHealthResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppGetHealthResponseDTOFromJSON(jsonValue));
    }

    /**
     * Return the application\'s health
     */
    async appGetHealthControllerGetHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppGetHealthResponseDTO> {
        const response = await this.appGetHealthControllerGetHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new conversation
     */
    async messengerCreateConversationControllerCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessengerCreateConversationResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messenger/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessengerCreateConversationResponseDTOFromJSON(jsonValue));
    }

    /**
     * Create a new conversation
     */
    async messengerCreateConversationControllerCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessengerCreateConversationResponseDTO> {
        const response = await this.messengerCreateConversationControllerCreateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get every messages from a messenger
     */
    async messengerGetMessagesControllerGetMessagesRaw(requestParameters: MessengerGetMessagesControllerGetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessengerGetMessagesResponseDTO>> {
        if (requestParameters['messengerId'] == null) {
            throw new runtime.RequiredError(
                'messengerId',
                'Required parameter "messengerId" was null or undefined when calling messengerGetMessagesControllerGetMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messenger/{messengerId}/messages`.replace(`{${"messengerId"}}`, encodeURIComponent(String(requestParameters['messengerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessengerGetMessagesResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get every messages from a messenger
     */
    async messengerGetMessagesControllerGetMessages(requestParameters: MessengerGetMessagesControllerGetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessengerGetMessagesResponseDTO> {
        const response = await this.messengerGetMessagesControllerGetMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get every messengers
     */
    async messengerGetMessengersControllerGetMessengersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessengerGetMessengersResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messenger/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessengerGetMessengersResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get every messengers
     */
    async messengerGetMessengersControllerGetMessengers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessengerGetMessengersResponseDTO> {
        const response = await this.messengerGetMessengersControllerGetMessengersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new conversation
     */
    async messengerSendMessageToAssistantControllerSendMessageRaw(requestParameters: MessengerSendMessageToAssistantControllerSendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['messengerId'] == null) {
            throw new runtime.RequiredError(
                'messengerId',
                'Required parameter "messengerId" was null or undefined when calling messengerSendMessageToAssistantControllerSendMessage().'
            );
        }

        if (requestParameters['messengerSendMessageToAssistantBodyDTO'] == null) {
            throw new runtime.RequiredError(
                'messengerSendMessageToAssistantBodyDTO',
                'Required parameter "messengerSendMessageToAssistantBodyDTO" was null or undefined when calling messengerSendMessageToAssistantControllerSendMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/messenger/{messengerId}/send-message`.replace(`{${"messengerId"}}`, encodeURIComponent(String(requestParameters['messengerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessengerSendMessageToAssistantBodyDTOToJSON(requestParameters['messengerSendMessageToAssistantBodyDTO']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new conversation
     */
    async messengerSendMessageToAssistantControllerSendMessage(requestParameters: MessengerSendMessageToAssistantControllerSendMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string | null | undefined > {
        const response = await this.messengerSendMessageToAssistantControllerSendMessageRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Create a new user from his name
     */
    async userCreateUserControllerCreateRaw(requestParameters: UserCreateUserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCreateUserResponseDTO>> {
        if (requestParameters['userCreateUserBodyDTO'] == null) {
            throw new runtime.RequiredError(
                'userCreateUserBodyDTO',
                'Required parameter "userCreateUserBodyDTO" was null or undefined when calling userCreateUserControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateUserBodyDTOToJSON(requestParameters['userCreateUserBodyDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCreateUserResponseDTOFromJSON(jsonValue));
    }

    /**
     * Create a new user from his name
     */
    async userCreateUserControllerCreate(requestParameters: UserCreateUserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCreateUserResponseDTO> {
        const response = await this.userCreateUserControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
